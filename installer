#!/bin/bash

# Step 1: Update package lists
echo "Updating package lists..."
sudo apt -q update || { echo "Failed to update package lists! Exiting..."; exit 1; }

# Step 2: Install git
echo "Installing git..."
sudo apt install git -y || { echo "Failed to install git! Exiting..."; exit 1; }

# Step 3: Install required packages
echo "Installing required packages..."
sudo apt-get install speedtest-cli htop tmux -y || { echo "Failed to install required packages! Exiting..."; exit 1; }

# Step 4: Download and extract Go
echo "Downloading and extracting Go..."
wget https://go.dev/dl/go1.20.14.linux-amd64.tar.gz || { echo "Failed to download Go! Exiting..."; exit 1; }
sudo tar -xvf go1.20.14.linux-amd64.tar.gz || { echo "Failed to extract Go! Exiting..."; exit 1; }
sudo mv go /usr/local || { echo "Failed to move Go to /usr/local! Exiting..."; exit 1; }
sudo rm go1.20.14.linux-amd64.tar.gz || { echo "Failed to remove downloaded archive! Exiting..."; exit 1; }

# Step 5: Set GO environment variables
echo "Setting GO environment variables..."
export PATH="$PATH:/usr/local/go/bin"
export GOPATH="$HOME/go"
echo 'export PATH="$PATH:/usr/local/go/bin"' >> ~/.bashrc
echo 'export GOPATH="$HOME/go"' >> ~/.bashrc
source ~/.bashrc

# Step 6: Create swap space
echo "Creating swap space..."
sudo mkdir /swap && sudo fallocate -l 24G /swap/swapfile && sudo chmod 600 /swap/swapfile || { echo "Failed to create swap space! Exiting..."; exit 1; }
sudo mkswap /swap/swapfile && sudo swapon /swap/swapfile || { echo "Failed to set up swap space! Exiting..."; exit 1; }
sudo bash -c 'echo "/swap/swapfile swap swap defaults 0 0" >> /etc/fstab' || { echo "Failed to update /etc/fstab! Exiting..."; exit 1; }

# Step 7: Adjust network buffer sizes
echo "Adjusting network buffer sizes..."
echo -e "\n# Increase buffer sizes for better network performance\nnet.core.rmem_max=600000000\nnet.core.wmem_max=600000000" | sudo tee -a /etc/sysctl.conf > /dev/null && sudo sysctl -p || { echo "Failed to adjust network buffer sizes! Exiting..."; exit 1; }

# Step 8: Clone the repository
echo "Cloning the repository..."
cd "$HOME" || { echo "Failed to change directory to $HOME! Exiting..."; exit 1; }
git clone https://github.com/QuilibriumNetwork/ceremonyclient.git || { echo "Failed to clone the repository! Exiting..."; exit 1; }
cd ceremonyclient/node || { echo "Failed to change directory to ceremonyclient/node! Exiting..."; exit 1; }

# Step 9: Run the Go program in the background
echo "Running the Go program in the background..."
GOEXPERIMENT=arenas /usr/local/go/bin/go run ./... & || { echo "Failed to run the Go program! Exiting..."; exit 1; }

# Step 10: Wait for a few seconds before proceeding
echo "Letting the node run for 5 minutes..."

countdown() {
    secs=$1         # Assign the input argument (300) to the variable 'secs'
    while [ $secs -gt 0 ]; do
        printf "\r%02d:%02d remaining" $(($secs/60)) $(($secs%60)) # Print the remaining time (mm:ss) with a carriage return (\r) to overwrite the previous line
        sleep 1     # Wait for 1 second
        ((secs--))  # Decrement the 'secs' variable by 1
    done
    printf "\nDone!\n" # After the countdown completes, print "Done!" on a new line
}

countdown 300 || { echo "Failed to wait! Exiting..."; exit 1; }

# Step 11: Prompt for reboot
read -p "Do you want to reboot the system now? (y/n): " choice
case "$choice" in 
  y|Y ) echo "Rebooting..."; sudo reboot;;
  n|N ) echo "Skipping reboot. Please reboot the system manually later.";;
  * ) echo "Invalid choice. Skipping reboot. Please reboot the system manually later.";;
esac

# End of script
echo "Script completed successfully."
