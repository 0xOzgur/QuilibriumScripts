#!/bin/bash

# Step 1: Update package lists
echo "Updating package lists..."
sudo apt -q update || { echo "Failed to update package lists! Exiting..."; exit 1; }

# Step 2: Install git
echo "Installing git..."
sudo apt install git -y || { echo "Failed to install git! Exiting..."; exit 1; }

# Step 3: Install required packages
echo "Installing required packages..."
sudo apt-get install curl htop tmux -y || { echo "Failed to install required packages! Exiting..."; exit 1; }
curl -s https://packagecloud.io/install/repositories/ookla/speedtest-cli/script.deb.sh | sudo bash
sudo apt-get install speedtest -y || { echo "Failed to install speedtest-cli! Exiting..."; exit 1; }

# Step 4: Configure firewall
echo "Configuring firewall..."
sudo ufw enable
sudo ufw allow 22
sudo ufw allow 8336
sudo ufw allow 443
sudo ufw status || { echo "Failed to configure firewall! Exiting..."; exit 1; }

# Step 4b: Enable gRPC
echo "Enabling gRPC..."
cd ~/ceremonyclient/node || { echo "Failed to change directory to ~/ceremonyclient/node! Exiting..."; exit 1; }
sudo sed -i 's#^listenGrpcMultiaddr:.*$#listenGrpcMultiaddr: /ip4/127.0.0.1/tcp/8337#' .config/config.yml || { echo "Failed to enable gRPC! Exiting..."; exit 1; }

# Step 4c: Enable Stats Collection
echo "Enabling Stats Collection..."
sudo sed -i 's#^  engine:$#  engine:\n    statsMultiaddr: "/dns/stats.quilibrium.com/tcp/443"#' .config/config.yml || { echo "Failed to enable Stats Collection! Exiting..."; exit 1; }

# Step 5: Download and extract Go
echo "Downloading and extracting Go..."
wget https://go.dev/dl/go1.20.14.linux-amd64.tar.gz || { echo "Failed to download Go! Exiting..."; exit 1; }
sudo tar -xvf go1.20.14.linux-amd64.tar.gz || { echo "Failed to extract Go! Exiting..."; exit 1; }
sudo mv go /usr/local || { echo "Failed to move Go to /usr/local! Exiting..."; exit 1; }
sudo rm go1.20.14.linux-amd64.tar.gz || { echo "Failed to remove downloaded archive! Exiting..."; exit 1; }

# Step 6: Set GO environment variables
echo "Setting GO environment variables..."
export PATH="$PATH:/usr/local/go/bin"
export GOPATH="$HOME/go"
echo 'export PATH="$PATH:/usr/local/go/bin"' >> ~/.bashrc
echo 'export GOPATH="$HOME/go"' >> ~/.bashrc
source "$HOME/.bashrc"  # Explicitly source the .bashrc file with the full path
sleep 1  # Add a 1-second delay

# Step 7: Create swap space
echo "Creating swap space..."
sudo mkdir /swap && sudo fallocate -l 24G /swap/swapfile && sudo chmod 600 /swap/swapfile || { echo "Failed to create swap space! Exiting..."; exit 1; }
sudo mkswap /swap/swapfile && sudo swapon /swap/swapfile || { echo "Failed to set up swap space! Exiting..."; exit 1; }
sudo bash -c 'echo "/swap/swapfile swap swap defaults 0 0" >> /etc/fstab' || { echo "Failed to update /etc/fstab! Exiting..."; exit 1; }

# Step 8: Adjust network buffer sizes
echo "Adjusting network buffer sizes..."
echo -e "\n# Increase buffer sizes for better network performance\nnet.core.rmem_max=600000000\nnet.core.wmem_max=600000000" | sudo tee -a /etc/sysctl.conf > /dev/null && sudo sysctl -p || { echo "Failed to adjust network buffer sizes! Exiting..."; exit 1; }

# Step 9: Clone the repository
echo "Cloning the repository..."
cd "$HOME" || { echo "Failed to change directory to $HOME! Exiting..."; exit 1; }
git clone https://github.com/QuilibriumNetwork/ceremonyclient.git || { echo "Failed to clone the repository! Exiting..."; exit 1; }
cd ceremonyclient/node || { echo "Failed to change directory to ceremonyclient/node! Exiting..."; exit 1; }

# Step 10: Run the node
echo "Changing directory to $HOME/ceremonyclient/node..."
cd "$HOME/ceremonyclient/node" || { echo "Failed to change directory to $HOME/ceremonyclient/node! Exiting..."; exit 1; }

echo "Running the node..."
GOEXPERIMENT=arenas /usr/local/go/bin/go run ./... > /dev/null 2>&1 &  # Redirect output to /dev/null
GO_PID=$!

# Step 11: Wait for a few seconds before proceeding
echo "Letting the node run for 5 minutes..."

countdown() {
    secs=$1         # Assign the input argument (300) to the variable 'secs'
    while [ $secs -gt 0 ]; do
        printf "\r%02d:%02d remaining" $(($secs/60)) $(($secs%60)) # Print the remaining time (mm:ss) with a carriage return (\r) to overwrite the previous line
        sleep 1     # Wait for 1 second
        ((secs--))  # Decrement the 'secs' variable by 1
    done
    printf "\nDone!\n" # After the countdown completes, print "Done!" on a new line
}

countdown 300 || { echo "Failed to wait! Exiting..."; exit 1; }

# Prompt for reboot
echo "Node installation is finished."
echo "Type 'sudo reboot' and press Enter to reboot your server."
echo "Then login again and follow the instructions of the guide to restart your node."
