#!/bin/bash -i

# Step 0: Welcome
echo "✨ Welcome! This script will prepare your server for the Quilibrium node installation. ✨"
echo "Made with 🔥 by LaMat"
echo "Processing... ⏳"
sleep 7  # Add a 7-second delay

# Step 1: Define a function for displaying exit messages
exit_message() {
    echo "❌ Oops! There was an error during the script execution and the process stopped. No worries!"
    echo "🔄 You can try to run the script from scratch again."
    echo "🛠️ If you still receive an error, you may want to proceed manually, step by step instead of using the auto-installer."
}

# Step 2: Check sudo availability
if ! [ -x "$(command -v sudo)" ]; then
  echo "⚠️ Sudo is not installed! This script requires sudo to run. Exiting..."
  exit_message
  exit 1
fi

# Step 3: Update and Upgrade the Machine
echo "🔄 Updating the machine..."
echo "Processing... ⏳"
sleep 2  # Add a 2-second delay
sudo apt-get update
sudo apt-get upgrade -y

# Step 4: Install required packages
echo "🔧 Installing useful packages..."
sudo apt-get install git wget tmux tar -y || { echo "❌ Failed to install useful packages! Exiting..."; exit_message; exit 1; }

# Step 5: Adjust network buffer sizes
echo "🌐 Adjusting network buffer sizes..."
if grep -q "^net.core.rmem_max=600000000$" /etc/sysctl.conf; then
  echo "✅ net.core.rmem_max=600000000 found inside /etc/sysctl.conf, skipping..."
else
  echo -e "\n# Change made to increase buffer sizes for better network performance for ceremonyclient\nnet.core.rmem_max=600000000" | sudo tee -a /etc/sysctl.conf > /dev/null
fi
if grep -q "^net.core.wmem_max=600000000$" /etc/sysctl.conf; then
  echo "✅ net.core.wmem_max=600000000 found inside /etc/sysctl.conf, skipping..."
else
  echo -e "\n# Change made to increase buffer sizes for better network performance for ceremonyclient\nnet.core.wmem_max=600000000" | sudo tee -a /etc/sysctl.conf > /dev/null
fi
sudo sysctl -p

# Step 6: Install gRPCurl
echo "📦 Installing gRPCurl..."
sleep 1  # Add a 1-second delay
sudo apt-get install grpcurl -y || { echo "❌ Failed to install gRPCurl! Exiting..."; exit_message; exit 1; }

# Function to check if a UFW rule exists
ufw_rule_exists() {
    local rule="$1"
    sudo ufw status | grep -q "$rule"
}

# Step 7: Install ufw and configure firewall
echo "🛡️ Installing ufw (Uncomplicated Firewall)..."
sudo apt-get update
sudo apt-get install ufw -y || { echo "❌ Failed to install ufw! Moving on to the next step..."; }

# Attempt to enable ufw
echo "🛡️ Configuring firewall..."
if command -v ufw >/dev/null 2>&1; then
    echo "y" | sudo ufw enable || { echo "❌ Failed to enable firewall! No worries, you can do it later manually."; }
else
    echo "⚠️ ufw (Uncomplicated Firewall) is not installed. Skipping firewall configuration."
fi

# Check if ufw is available and configured
if command -v ufw >/dev/null 2>&1 && sudo ufw status | grep -q "Status: active"; then
    # Allow required ports
    for port in 22 8336 443; do
        if ! ufw_rule_exists "${port}"; then
            sudo ufw allow "${port}" || echo "⚠️ Error: Failed to allow port ${port}! You will need to allow port 8336 manually for the node to connect."
        fi
    done

    # Display firewall status
    sudo ufw status
    echo "✅ Firewall setup was successful."
else
    echo "⚠️ Failed to configure firewall or ufw is not installed. No worries, you can do it later manually. Moving on to the next step..."
fi

# Step 8: Creating some useful folders
echo "📂 Creating /root/backup/ folder..."
sudo mkdir -p /root/backup/
echo "✅ Done."

echo "📂 Creating /root/scripts/ folder..."
sudo mkdir -p /root/scripts/
echo "✅ Done."

echo "📂 Creating /root/scripts/log/ folder..."
sudo mkdir -p /root/scripts/log/
echo "✅ Done."

# Step 9: Prompt for reboot
echo "🎉 Server setup is finished!"
echo "🔄 Type 'sudo reboot' and press ENTER to reboot your server."
echo "🔗 Then follow the online guide for the next steps"
echo " to install your Quilibrium node as a service: https://iri.quest/quilibrium-node-guide"
